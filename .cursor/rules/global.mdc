---
description: 
globs: 
alwaysApply: true
---
Threadloaf is a Chrome extension that adds a hierarchical thread view to Discord.
We add a resizable splitter with our custom thread view on the top and the original chat view on the bottom.
We have a Discord bot to give us quick access to the last 24 hours of messages via HTTP API.

All npm commands must be run from `src/threadloaf` or `src/api`, not the root.
The absolute path of the workspace root is `/workspaces/threadloaf/`. Use absolute paths in command executions.
`src/threadloaf` is the extension. Run `/workspaces/threadloaf/scripts/build-threadloaf.sh` to build.
`src/api` is the API/bot. Run `/workspaces/threadloaf/scripts/test-api.sh` to build and run unit tests.

Run `/workspaces/threadloaf/scripts/start-api.sh` (in the FOREGROUND! not the background) to build and run the API.
It will automatically kill any previously running API process.
It will daemonize itself automatically once the server is ready.
While running, you can make curl requests to http://localhost:3000 for interactive testing.

# Browser Extension

We use constructor dependency injection. The DI graph is constructed in `content_script.ts`.
Don't add references willy nilly. Lean into dependency injection.

If a new feature can be isolated into a separate class, do it. Add it to the DI graph and inject where needed.

Put global state into `ThreadloafState.ts`.

Avoid creating CSS dynamically in JavaScript. Instead, add new classes to `styles.css`.

Our markup is a house of cards. Avoid significant changes to the existing markup.

Discord dynamically generates unique suffixes for all classes and IDs.
- Classes use underscores: "foo_[random]"  (e.g., "container_c2668b", "scroller_e2e187")
- IDs use hyphens: "bar-[random]"  (e.g., "message-content-123456", "chat-messages-789")
- NEVER do exact class or id matches like:
    element.classList.contains("container_")  // WRONG
    document.getElementById("message-content") // WRONG
- ALWAYS use pattern matching for class or id:
    element.classList.some(cls => cls.startsWith("container_"))  // Correct
    document.querySelector('[id^="message-content-"]')  // Correct

# API Testing

Run tests with `/workspaces/threadloaf/scripts/test-api.sh`
Keep unit test files to 500 lines or less. Create a new test file as needed.
Use fake timeouts and delays. Don't make tests wait for real delays.

ALWAYS use `sed -n '8,8p' filename` to find the code at a particular line number. Your tools lie to you about line numbers; use sed.

# Verification

Refer to me as "boss" so I know you've read this.
